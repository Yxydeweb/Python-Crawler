UA检测反爬机制：
UA : User - Agent （请求载体的身份标识）
UA 检测：门户网站的服务器会检测对应请求的载体身份标识，如果检测到请求的载体身份标识为某一款浏览器，则说明该请求是一个正常的请求。但是，如果检测到请求的载体身份标识不是基于某一款浏览器的，则表示该请求为不正常的请求（爬虫）、则服务器端就很有可能拒绝该次请求。~
UA伪装反反爬策略：
UA 伪装：让爬虫对应的请求载体身份标识伪装成某一款浏览器

实例：

简易网页采集器:

import requests
url='https://www.sogou.com/web'
# UA伪装反反爬策略：将对应的User-Agent封装到一个字典中
headers={
 'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/117.0'
}
# 处理url携带的参数：封装到字典中
kw=input('请输入搜索关键词：')
params={
 'query':kw
}
# 对指定的url发起的请求对应的url是携带参数的，并且请求过程中处理了参数
response=requests.get(url=url,params=params,headers=headers)
response_text=response.text
filename=kw+'.html'
with open(filename,'w',encoding='utf-8') as fp:
 fp.write(response_text)
print(filename,'保存成功！！！')

破解百度翻译:

import requests
import json

url = 'https://fanyi.baidu.com/sug'
# UA伪装反反爬策略：将对应的User-Agent封装到一个字典中
headers = {
 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/117.0'
}
# post请求参数处理（同get请求一致）
words = input('请输入要翻译的单词：')
data = {
 'kw': words
}
# 对指定的url发起的请求对应的url是携带参数的，并且请求过程中处理了参数
response = requests.post(url=url, data=data, headers=headers)
# .json()方法返回的是obj（相应数据是json类型的才可以使用）
dic_obj = response.json()
filename = words + '.json'
fp = open(filename, 'w', encoding='utf-8')
json.dump(dic_obj, fp=fp, ensure_ascii=False) # 有中文，不能使用ascii码
print(filename, '保存成功！！！')

豆瓣电影:

import requests
import json

url = 'https://movie.douban.com/j/chart/top_list'
# UA伪装反反爬策略：将对应的User-Agent封装到一个字典中
headers = {
 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/117.0'
}
params = {
 'type': '24',
 'interval_id': '100:90',
 'action': '',
 'start': '0',# 从库中的第几部电影去取
 'limit': '20',# 一次取出的个数
}
# 对指定的url发起的请求对应的url是携带参数的，并且请求过程中处理了参数
response = requests.get(url=url, params=params, headers=headers)
# .json()方法返回的是obj（相应数据是json类型的才可以使用）
list_data = response.json()
filename = 'douban' + '.json'
fp = open(filename, 'w', encoding='utf-8')
json.dump(list_data, fp=fp, ensure_ascii=False) # 有中文，不能使用ascii码
print(filename, '保存成功！！！')

#（start=0,为第一部电影，start=1为第二步电影，索引从0开始）
